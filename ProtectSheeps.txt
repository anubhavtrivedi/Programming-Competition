import java.io.*;
import java.util.*;

public class GFG {
	static int[] b;

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int r, c;
		r = in.nextInt();
		c = in.nextInt();
		in.nextLine();
		char[][] grid = new char[r][c];
		char[] temp;
		for (int i = 0; i < r; i++) {
			temp = in.nextLine().toCharArray();
			for (int j = 0; j < c; j++) {
				grid[i][j] = temp[j];
			}
		}
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				if (grid[i][j] == '.') {
					grid[i][j] = 'D';
				}
			}
		}
		int n, m;
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {

				if (grid[i][j] == 'W') {
					// System.out.println(i+" "+j);
					// d
					n = i - 1;
					m = j;
					if (n >= 0 && m >= 0) {
						if (grid[n][m] == 'S') {
							System.out.println("No");
							return;
						}
					}
					// r
					n = i;
					m = j - 1;
					if (n >= 0 && m >= 0) {
						if (grid[n][m] == 'S') {
							System.out.println("No");
							return;
						}
					}
					// l
					n = i;
					m = j + 1;
					if (n < r && m < c) {
						if (grid[n][m] == 'S') {
							System.out.println("No");
							return;
						}
					}
					// u
					n = i + 1;
					m = j;
					if (n < r && m < c) {
						if (grid[n][m] == 'S') {
							System.out.println("No");
							return;
						}
					}

				}
			}
		}

		System.out.println("Yes");
		for (int i = 0; i < r; i++) {
			System.out.println(new String(grid[i]));
		}

	}

	void merge(int arr[], int l, int m, int r) {
		// Find sizes of two subarrays to be merged
		int n1 = m - l + 1;
		int n2 = r - m;

		/* Create temp arrays */
		int L[] = new int[n1];
		int R[] = new int[n2];

		/* Copy data to temp arrays */
		for (int i = 0; i < n1; ++i)
			L[i] = arr[l + i];
		for (int j = 0; j < n2; ++j)
			R[j] = arr[m + 1 + j];

		/* Merge the temp arrays */

		// Initial indexes of first and second subarrays
		int i = 0, j = 0;

		// Initial index of merged subarry array
		int k = l;
		while (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				arr[k] = L[i];
				i++;
			} else {
				arr[k] = R[j];
				j++;
			}
			k++;
		}

		/* Copy remaining elements of L[] if any */
		while (i < n1) {
			arr[k] = L[i];
			i++;
			k++;
		}

		/* Copy remaining elements of R[] if any */
		while (j < n2) {
			arr[k] = R[j];
			j++;
			k++;
		}
	}

	// Main function that sorts arr[l..r] using
	// merge()
	void sort(int arr[], int l, int r) {
		if (l < r) {
			// Find the middle point
			int m = (l + r) / 2;

			// Sort first and second halves
			sort(arr, l, m);
			sort(arr, m + 1, r);

			// Merge the sorted halves
			merge(arr, l, m, r);
		}

	}
}
