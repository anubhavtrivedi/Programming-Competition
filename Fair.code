
import java.util.*;
import java.lang.*;
import java.io.*;
/*
* The game starts with row of coins and a player can choose any of the two extreem coins in his turn. the goal here is to maximise the
* individual score.
*/
public final class Main {
  
   static public class Node{
       public int prod;
       public ArrayList<Node> connected=new ArrayList<>();
       public void addnext(Node x){
           connected.add(x);
       }
       public void addProd(int x){
           prod=x;
       }
       public Node(int prd){
           addProd(prd);
       }
   }
	public static void main (String[] args) throws java.lang.Exception {
	    Scanner in=new Scanner(System.in);
	   int n=in.nextInt();
	   int m=in.nextInt();
	   int k=in.nextInt();
	   int s=in.nextInt();
	   Node[] nodes=new Node[n+1];
	   for(int i=1;i<=n;i++){
	       nodes[i]=new Node(in.nextInt());
	   }
	   int a,b;
	   for(int i=0;i<m;i++){
	       a=in.nextInt();
	       b=in.nextInt();
	        nodes[a].addnext(nodes[b]);
	        nodes[b].addnext(nodes[a]);
	   }
	   int[] ans= bfsResult(nodes,s);
	   for(int i=1;i<ans.length;i++){
	       if(i==1)
	       System.out.print(ans[i]);
	       else
	       System.out.print(" "+ans[i]);
	   }
	}
	
	public static int[] bfsResult(Node[] nodes,int s){
	    
	    int[] ans=new int[nodes.length];
	    int pro=0,cost=0,currCost=0;
	    ArrayList<Node> l1=new ArrayList<>();
	    ArrayList<Node> l2=new ArrayList<>();
	  
	    
	   for(int i=1;i<nodes.length;i++){
	       l1.clear();
	         for(Node y:nodes[i].connected){
	               l1.add(y);
	           }
	         
	       int[] stat=new int[nodes.length];
	       stat[nodes[i].prod]=1;
	       pro=1;cost=0;currCost=0;
	       
	       while(true){
	           
	           if(pro==s)
	           {
	               ans[i]=cost;
	               break;
	           }
	           currCost++;
	           
	       for(Node x:l1){
	            if(pro==s){
	               break;
	           }
	           
	           if(stat[x.prod]==0){
	               pro++;
	               stat[x.prod]=1;
	               cost+=currCost;
	           }
	          
	           for(Node y:x.connected){
	               l2.add(y);
	           }
	           
	       }
	       l1.clear();
	       l1.addAll(l2);
	       l2.clear();
	 
	       }
	       //end while
	       
	       
	   }
	    return ans;
	}
	
	
	
	
	
	
	
}